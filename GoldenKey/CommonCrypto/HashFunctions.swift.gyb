//
//  CommonDigest.swift
//  GoldenKey
//
//  Created by Alexander Ignatev on 02/01/2019.
//  Copyright Â© 2019 Alexander Ignition. All rights reserved.
//

import Foundation
import CommonCrypto.CommonDigest

%{
DIGESTS = [('MD2', 'MD2'),
           ('MD4', 'MD4'),
           ('MD5', 'MD5'),
           ('SHA1', 'SHA1'),
           ('SHA224', 'SHA256'),
           ('SHA256', 'SHA256'),
           ('SHA384', 'SHA512'),
           ('SHA512', 'SHA512')]
}%
    
% for (name, context) in DIGESTS:
public struct ${name}Digest: Digest {
    public static var byteCount: Int { return Int(CC_${name}_DIGEST_LENGTH) }

    private let buffer: Shared<UnsafeRawBufferPointer>

    public init?(bufferPointer: UnsafeRawBufferPointer) {
        guard ${name}Digest.byteCount == bufferPointer.count else { return nil }
        let buffer = UnsafeMutableRawBufferPointer.allocate(
            byteCount: bufferPointer.count,
            alignment: MemoryLayout<UInt8>.alignment
        )
        buffer.copyMemory(from: bufferPointer)
        self.buffer = Shared(UnsafeRawBufferPointer(buffer))
    }

    public func withUnsafeBytes<R>(_ body: (UnsafeRawBufferPointer) throws -> R) rethrows -> R {
        return try buffer.pointer.withUnsafeBytes(body)
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(bytes: buffer.pointer)
    }
}

public struct ${name}: HashFunction {
    public typealias Digest = ${name}Digest

    private let context = Shared(UnsafeMutablePointer<CC_${context}_CTX>.allocate(capacity: 1))

    public init() {
        CC_${name}_Init(context.pointer)
    }

    public mutating func update(bufferPointer: UnsafeRawBufferPointer) {
        CC_${name}_Update(context.pointer, bufferPointer.baseAddress, CC_LONG(bufferPointer.count))
    }

    public func finalize() -> ${name}Digest {
        let buffer = UnsafeMutableBufferPointer<UInt8>.allocate(capacity: ${name}Digest.byteCount)
        defer { buffer.deallocate() }

        let context = UnsafeMutablePointer<CC_${context}_CTX>.allocate(capacity: 1)
        context.assign(from: self.context.pointer, count: 1)
        defer { context.deallocate() }

        CC_${name}_Final(buffer.baseAddress, context)
        return ${name}Digest(bufferPointer: UnsafeRawBufferPointer(buffer))!
    }

    public static func hash(bufferPointer: UnsafeRawBufferPointer) -> ${name}Digest {
        let buffer = UnsafeMutableBufferPointer<UInt8>.allocate(capacity: ${name}Digest.byteCount)
        defer { buffer.deallocate() }

        CC_${name}(bufferPointer.baseAddress, CC_LONG(bufferPointer.count), buffer.baseAddress)
        return ${name}Digest(bufferPointer: UnsafeRawBufferPointer(buffer))!
    }

}

% end
